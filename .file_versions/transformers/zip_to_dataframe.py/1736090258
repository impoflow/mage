import base64
import pandas as pd
import zipfile
from io import BytesIO
from typing import List, IO
import re

from mage.utils.transformer import DataTransformer

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Args:
        data: Serialized ZIP file dictionary from the upstream block.

    Returns:
        pd.DataFrame: Processed DataFrame with filtered imports and implements.
    """
    transformer = DataTransformer()  # Create an instance
    transformed_data = transformer.transform(data)  # Transform the serialized data

    return transformed_data



@test
def test_is_dataframe(output, *args) -> None:
    assert isinstance(output, pd.DataFrame), f'Expected output to be a DataFrame, but got {type(output)}'

@test
def test_output_not_none(output, *args) -> None:
    assert output is not None, 'The output is undefined'
@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    
    assert not output.empty, 'The output DataFrame is empty'

@test
def test_ismain_exist(output, *args) -> None:
        assert 'ismain' in output.columns, "The column 'ismain' is missing from the DataFrame"

@test
def test_has_one_ismain(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """


    ismain_true_count = output['ismain'].sum()
    assert ismain_true_count == 1, f"The column 'ismain' should have exactly one True value, but found {ismain_true_count}"